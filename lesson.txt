

# Crate Autoscaling Group
aws autoscaling create-auto-scaling-group --auto-scaling-group-name asaghatelyan --min-size 1 --max-size 3 --desired-capacity 1 --launch-template LaunchTemplateName=asaghatelyan

# Crate LoadBalancer 
aws elbv2 create-load-balancer --name asaghatelyan --type application --subnets subnet-03d6c24170a8b8dc1 subnet-0e7d2aee4619a71ec

#Crate TargetGroup 
aws elbv2 create-target-group --name asaghatelyan --protocol HTTP --port 80 --vpc-id vpc-0799504f6df9624a0


#  AutoScallingGroup  LoadBalancer
aws autoscaling attach-load-balancer-target-groups --auto-scaling-group-name asaghatelyan --target-group-arns arn:aws:elasticloadbalancing:us-east-1:730335231758:targetgroup/asaghatelyan/beec8d99d29661ec

# crate RDS MySQL 
aws rds create-db-instance --db-instance-identifier asaghatelyan --db-instance-class db.t2.micro --engine MySQL --master-username root --master-user-password passwordik --allocated-storage 20 --vpc-security-group-ids sg-05fedb6ae58a19dd1 --db-subnet-group-name Default-vpc-0799504f6df9624a0 --no-publicly-accessible

# crate S3 Bucket 
aws s3api create-bucket --bucket asagahatelyan
aws s3api put-bucket-versioning --bucket asagahatelyan --versioning-configuration Status=Enabled

# upload file into  the bucket
echo >> test.txt "Hello World"
aws s3 cp test.txt s3://asagahatelyan/
echo >> test.txt "Hello World new file "
aws s3 cp test.txt s3://asagahatelyan/
aws s3api get-bucket-versioning --bucket asagahatelyan


#terminate Template 
aws ec2 delete-launch-template --launch-template-id lt-0dbf411e7a8671802 --region us-east-1
#terminate s3 Bucket
aws s3 rb s3://asaghatelyan --force
#terminate RDS
aws rds delete-db-instance --db-instance-identifier asaghatelyan --skip-final-snapshot
